import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths

rustic {
    projectSettings {
        projectLocation "$rootDir/kanaria_extern"
        jobs 4
    }

    flavors {
        x86 {
            target "i686-pc-windows-gnu"
            environments = [
                    AR                                        : "/usr/bin/i686-w64-mingw32-gcc-ar",
                    CC                                        : "/usr/bin/i686-w64-mingw32-gcc",
                    CARGO_TARGET_I686_PC_WINDOWS_GNU_RUSTFLAGS: "-C panic=abort"
            ]
        }

        x86_64 {
            target "x86_64-pc-windows-gnu"
            environments = [
                    AR: "/usr/bin/x86_64-w64-mingw32-gcc-ar",
                    CC: "/usr/bin/x86_64-w64-mingw32-gcc"
            ]
        }
    }

    variants.all {
        if (it.enabled == false) {
            // 無効化されているvariantは処理しない
            return
        }

        // .cargo/configの設定値であるlinker相当の環境変数を設定。CCと同じやつでOK
        String target = it.target
        String cc = it.environments["CC"]
        if (target != null && cc != null) {
            String linkerEnvName = "CARGO_TARGET_" + target.replace("-", "_").toUpperCase() + "_LINKER"
            it.environments.put(linkerEnvName, cc)
        }

        // リリースビルドに限り、ビルド成果物をcosturaのディレクトリに配置する
        boolean isRelease = it.buildOptions.debug == false
        Task buildTask = tasks["rustBuild" + it.name.toString()]
        if (target != null && isRelease && buildTask != null) {
            String bit = target.contains("x86_64") ? "64" : "32"

            Path srcFilePath = Paths.get(it.outputPath.toString(), "kanaria.dll")
            Path dstFilePath = Paths.get("$projectDir/KanariaDotnet/costura${bit}/", "kanaria.dll")

            // variants#all()の実行時点ではビルドが走っておらず成果物がないため、
            // ビルドの後処理としてコピー処理を設定する
            buildTask.doLast {
                if (!Files.exists(dstFilePath.parent)) {
                    Files.createDirectories(dstFilePath.parent)
                }

                if (Files.exists(dstFilePath)) {
                    Files.delete(dstFilePath)
                }

                println("Copy the build output from rustBuild to src/main/resources.")
                println("  copy from : " + srcFilePath)
                println("  copy to   : " + dstFilePath)
                Files.copy(srcFilePath, dstFilePath)
            }
        }
    }
}